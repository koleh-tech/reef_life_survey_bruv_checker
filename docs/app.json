[{"name": "app.py", "content": "from shiny import App, render, ui\nfrom load_rls_training import BRUVDataFramesFromExcelFile\nfrom main import main\n\n\napp_ui = ui.page_fluid(\n    ui.h2(\"RLS BRUV Checker\"),\n    ui.input_file(\"file\", \"File\"),\n    ui.output_text_verbatim(\"txt\"),\n    ui.a(\"Link to source code\", href=\"https://github.com/koleh-tech/reef_life_survey_bruv_checker\")\n)\n\n\ndef server(input, output, session):\n    @output\n    @render.text\n    def txt():\n        if not input.file():\n            return \"Please upload a file\"\n        bruv_data_frames = BRUVDataFramesFromExcelFile(input.file()[0][\"datapath\"])\n        return main(bruv_data_frames)\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "load_rls_training.py", "content": "import pandas as pd\nfrom pandas import DataFrame\nfrom collections import namedtuple\nfrom typing import NamedTuple, Dict, List\n\n\ndef BRUVDataFramesFromExcelFile(\n    file,\n    BRUVDataFrames: NamedTuple = namedtuple(\n        \"BRUVDataFrames\",\n        \"max_n length site\"\n        )\n    ):\n    \"\"\"Reads tabs from excel file into dataframe structure\n    specified by BRUVDataFrames\n    \"\"\"\n    excel_file = pd.ExcelFile(file)\n    return BRUVDataFrames(\n        excel_file.parse('MaxN'),\n        excel_file.parse('Length'),\n        excel_file.parse('Site'),\n    )\n\n\ndef make_errors_have_same_length(errors: Dict) -> Dict:\n    \"\"\"Errors are represented as a dictionary, with \n    key: error type\n    value: list of errors (eg. OpCodes)\n    To convert these errors to a dataframe, and save it to a csv,\n    each of these lists need to be of equal length.\n    \"\"\"\n    largest_number_of_errors = 0\n    result = {}\n    for error_list in errors.values():\n        if len(error_list) > largest_number_of_errors:\n            largest_number_of_errors = len(error_list)\n\n    for error_name, error_list  in errors.items():\n        result[error_name] = error_list + (\n            [None] * (largest_number_of_errors - len(error_list))\n        )\n    return result\n\n\ndef save_errors_to_csv(errors: Dict, running_locally = False):\n    errors_to_save = make_errors_have_same_length(errors)\n\n    # Convert dictionary to dataframe and download it\n    pd.DataFrame.from_dict(errors_to_save).to_csv('errors.csv', index=False)\n    if running_locally:\n        return\n\n    files.download('errors.csv')\n\n\ndef difference_between_arrays(array_1, array_2):\n    return list(set(array_1) - set(array_2))\n\n\ndef op_code_species_groups_with_more_than_one_count(bruv_dataframe: DataFrame) -> List[str]:\n    columns_to_group_by = ['OpCode','Family','Genus','Species']\n    op_code_species_counts = bruv_dataframe.groupby(\n        columns_to_group_by\n    ).size()\n\n    errors = []\n    group_message = lambda group: ' - '.join([f\"{col}: {val}\" for col, val in zip(columns_to_group_by, group)])\n\n    for group, count in dict(op_code_species_counts).items():\n        if count > 1:\n            errors.append(\n                f\"Count: {count} - {group_message(group)}\"\n            )\n\n    return errors\n", "type": "text"}, {"name": "main.py", "content": "from load_rls_training import (\n    difference_between_arrays,\n    op_code_species_groups_with_more_than_one_count\n)\n\ndef main(bruv_data_frames):\n    errors = {\n        \"MaxN has OpCode(s) which aren't in Site\" : difference_between_arrays(\n            bruv_data_frames.max_n.get('OpCode').unique(),\n            bruv_data_frames.site.get('OpCode').unique()\n        ),\n        \"Site has OpCode(s) which aren't in MaxN\" : difference_between_arrays(\n            bruv_data_frames.site.get('OpCode').unique(),\n            bruv_data_frames.max_n.get('OpCode').unique(),\n        ),\n        \"Site has OpCode(s) which aren't in Length\" : difference_between_arrays(\n            bruv_data_frames.site.get('OpCode').unique(),\n            bruv_data_frames.length.get('OpCode').unique(),\n        ),\n        \"Length has OpCode(s) which aren't in Site\" : difference_between_arrays(\n            bruv_data_frames.length.get('OpCode').unique(),\n            bruv_data_frames.site.get('OpCode').unique()\n        ),\n        \"OpCode(s) have species with more than one count\" : op_code_species_groups_with_more_than_one_count(\n            bruv_data_frames.max_n\n        ),\n    }\n    result = []\n    for error_type in errors.keys():\n        result.append(error_type)\n        result.append('\\n'.join(errors[error_type]))\n        result.append('\\n')\n    return '\\n'.join(result)\n\n\nif __name__ == \"__main__\":\n    from load_rls_training import BRUVDataFramesFromExcelFile\n    print(main(bruv_data_frames = BRUVDataFramesFromExcelFile('data/BRUVchecker_Test.xlsx')))", "type": "text"}, {"name": "requirements.txt", "content": "et-xmlfile==1.1.0\nopenpyxl==3.0.10\n", "type": "text"}]